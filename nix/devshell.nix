# ðŸŒºðŸ’œ Violet: Extended standard library for C++26
# Copyright (c) 2025 Noelware, LLC. <team@noelware.org> & other contributors
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
{
  mkShell,
  stdenv,
  lib,
  stdenvAdapters,
  llvmPackages_20,
  ## os-specific
  ### - linux
  valgrind,
  ### - darwin
  apple-sdk_15,
  ## tools
  pkg-config,
  python3,
  bazel_7,
  bazel-buildtools,
  meson,
  cmake,
  ninja,
  ## lsp
  starpls,
  nil,
}: let
  darwinPackages = [apple-sdk_15];
  linuxPackages = [valgrind];

  # Alias for `llvmPackages_XX` that we aim to support. At the moment,
  # we develop Violet in LLVM 20 and above.
  llvm = let
    oldStdenv = stdenv;
  in rec {
    version = "20";
    pkgs = llvmPackages_20;
    stdenv =
      (
        if oldStdenv.hostPlatform.isLinux
        then stdenvAdapters.useMoldLinker
        else lib.id
      )
      pkgs.stdenv;
  };

  packages =
    [
      # For sanitizers
      llvm.pkgs.compiler-rt
      llvm.pkgs.libcxx

      llvm.pkgs.clang-tools
      llvm.pkgs.bintools
      bazel-buildtools
      pkg-config
      python3

      # build systems (we support Bazel, CMake, and Meson)
      bazel_7
      cmake
      meson
      ninja

      # LSPs
      starpls
      nil
    ]
    ++ (lib.optional stdenv.isLinux linuxPackages)
    ++ (lib.optional stdenv.isDarwin darwinPackages);

  mkShell' = mkShell.override {stdenv = llvm.stdenv;};
in
  mkShell' {
    inherit packages;

    name = "eous-dev";
    shellHook = ''
            realresourcepath="${llvm.pkgs.compiler-rt.dev}"
            cwd=$(pwd)

            echo "==> patching *San include headers ~> $realresourcepath ... (editing .usr.bazelrc in $cwd)"
            line="build:san --copt=-I${llvm.pkgs.compiler-rt.dev}/include"

            if [ ! -f "$cwd/.usr.bazelrc" ]; then
              echo "==> \`.usr.bazelrc\` doesn't exist! adding proper configuration..."
              touch "$cwd/.usr.bazelrc"

              cat > "$cwd/.usr.bazelrc" <<EOF
      # === THIS FILE WAS AUTOMATICALLY GENERATED BY THE SHELL ENVIRONMENT ON NIX ==
      #
      # Workaround for missing standard C++ headers on NixOS
      # Related issue: https://github.com/NixOS/nixpkgs/issues/150655
      build --cxxopt=-xc++ --host_cxxopt=-xc++

      # Workaround for missing C++ headers for *San configurations (ASan, TSan, etc...)
      build:san --copt=-I$realresourcepath/include
      EOF

              echo "==> finished!"
            else
              if ! grep -Fxq "$line" "$cwd/.usr.bazelrc"; then
                sed -i "/^build:san --copt=-I.*$/d" "$cwd/.usr.bazelrc"
                echo "$line" >> "$cwd/.usr.bazelrc"
                echo "==> updated \`.usr.bazelrc\` to include $realresourcepath for *San configurations"
              fi
            fi
    '';
  }
