# ðŸŒºðŸ’œ Violet: Extended standard library for C++26
# Copyright (c) 2025 Noelware, LLC. <team@noelware.org> & other contributors
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

name: CI
on:
    workflow_dispatch: {}
    push:
        branches:
            - 'issues/gh-**'
            - 'feat/**'
            - master

        paths-ignore:
            - '.github/**'
            - '.vscode/**'
            - 'nix/**'

            - .*ignore
            - .clangd
            - .envrc
            - flake.lock
    pull_request:
        types: [opened, synchronize]
        branches:
            - 'issues/gh-**'
            - 'feat/**'
            - master
        paths:
            - '**'
permissions:
    contents: read
    checks: write
concurrency:
    group: ${{github.workflow}}-${{github.ref}}
    cancel-in-progress: true
jobs:
    bazel-linux:
        name: "Bazel / Linux [${{matrix.compiler}} / Bazel ${{matrix.bazel-version}}]"
        runs-on: ubuntu-latest
        container:
            image: ghcr.io/noelware/violet/ci:${{matrix.compiler}}
        strategy:
            fail-fast: false
            matrix:
                compiler: [gcc-15, gcc-14, gcc-13, clang-21, clang-20]
                bazel-version: ["7.6.0", "8.4.2"]
                include:
                    - {compiler: clang-21, cc: "clang-21", cxx: "clang++-21", flags: "--config=clang"}
                    - {compiler: clang-20, cc: "clang-20", cxx: "clang++-20", flags: "--config=clang"}
                    - {compiler: gcc-15, cc: "gcc", cxx: "g++", flags: ""}
                    - {compiler: gcc-14, cc: "gcc", cxx: "g++", flags: ""}
                    - {compiler: gcc-13, cc: "gcc", cxx: "g++", flags: ""}
        env:
            USE_BAZEL_VERSION: ${{matrix.bazel-version}}
            BAZELFLAGS: "--config=ci --action_env=CC=${{matrix.cc}} --action_env=CXX=${{matrix.cxx}} ${{matrix.flags}}"
        steps:
            - uses: actions/checkout@v5
            - uses: actions/cache@v4
              with:
                key: bazel-cache-linux-${{matrix.compiler}}-${{hashFiles('MODULE.bazel', 'BUILD.bazel')}}
                restore-keys: bazel-cache-linux-${{matrix.compiler}}-
                path: |
                    ~/.cache/bazel
                    ~/.cache/bazelisk

            - run: bazel build ${{env.BAZELFLAGS}} //...
            - run: bazel test ${{env.BAZELFLAGS}} //...
    asan-linux:
        name: "Bazel / Linux [${{matrix.compiler}} (ASan)]"
        runs-on: ubuntu-latest
        container:
            image: ghcr.io/noelware/violet/ci:${{matrix.compiler}}
        strategy:
            fail-fast: false
            matrix:
                compiler: [gcc-15, clang-21]
                include:
                    - {compiler: clang-21, cc: "clang-21", cxx: "clang++-21", flags: "--config=clang --test_env=ASAN_SYMBOLIZER_PATH=/usr/bin/llvm-symbolizer-21"}
                    - {compiler: gcc-15, cc: "gcc", cxx: "g++", flags: ""}
        env:
            USE_BAZEL_VERSION: "8.4.2"
            BAZELFLAGS: "--config=ci --config=asan --action_env=CC=${{matrix.cc}} --action_env=CXX=${{matrix.cxx}} ${{matrix.flags}}"
        steps:
            - uses: actions/checkout@v5
            - uses: actions/cache@v4
              with:
                key: bazel-cache-linux-${{matrix.compiler}}-asan-${{hashFiles('MODULE.bazel', 'BUILD.bazel')}}
                restore-keys: bazel-cache-linux-${{matrix.compiler}}-asan-
                path: |
                    ~/.cache/bazel
                    ~/.cache/bazelisk

            - run: bazel build ${{env.BAZELFLAGS}} //...
            - run: bazel test ${{env.BAZELFLAGS}} //...
    msan-linux:
        name: "Bazel / Linux [Clang (MSan)]"
        runs-on: ubuntu-latest
        container:
            image: ghcr.io/noelware/violet/ci:clang-21
        env:
            USE_BAZEL_VERSION: "8.4.2"
            BAZELFLAGS: "--config=ci --config=msan --config=clang --action_env=CC=clang-21 --action_env=CXX=clang-21 --test_env=MSAN_SYMBOLIZER_PATH=/usr/bin/llvm-symbolizer-21"
        steps:
            - uses: actions/checkout@v5
            - uses: actions/cache@v4
              with:
                key: bazel-cache-linux-clang-21-msan-${{hashFiles('MODULE.bazel', 'BUILD.bazel')}}
                restore-keys: bazel-cache-linux-clang-21-msan-
                path: |
                    ~/.cache/bazel
                    ~/.cache/bazelisk

            - run: bazel build ${{env.BAZELFLAGS}} //...
            - run: bazel test ${{env.BAZELFLAGS}} //...
    ubsan-linux:
        name: "Bazel / Linux [${{matrix.compiler}} (UBSan)]"
        runs-on: ubuntu-latest
        container:
            image: ghcr.io/noelware/violet/ci:${{matrix.compiler}}
        strategy:
            fail-fast: false
            matrix:
                compiler: [gcc-15, clang-21]
                include:
                    - {compiler: clang-21, cc: "clang-21", cxx: "clang++-21", flags: "--test_env=UBSAN_SYMBOLIZER_PATH=/usr/bin/llvm-symbolizer-21 --config=clang"}
                    - {compiler: gcc-15, cc: "gcc", cxx: "g++", flags: ""}
        env:
            USE_BAZEL_VERSION: "8.4.2"
            BAZELFLAGS: "--config=ci --config=ubsan --action_env=CC=${{matrix.cc}} --action_env=CXX=${{matrix.cxx}} ${{matrix.flags}}"
        steps:
            - uses: actions/checkout@v5
            - uses: actions/cache@v4
              with:
                key: bazel-cache-linux-${{matrix.compiler}}-ubsan-${{hashFiles('MODULE.bazel', 'BUILD.bazel')}}
                restore-keys: bazel-cache-linux-${{matrix.compiler}}-ubsan-
                path: |
                    ~/.cache/bazel
                    ~/.cache/bazelisk

            - run: bazel build ${{env.BAZELFLAGS}} //...
            - run: bazel test ${{env.BAZELFLAGS}} //...
    t1san-linux:
        name: "Bazel / Linux [${{matrix.compiler}} (TSan)]"
        runs-on: ubuntu-latest
        container:
            image: ghcr.io/noelware/violet/ci:${{matrix.compiler}}
        strategy:
            fail-fast: false
            matrix:
                compiler: [gcc-15, clang-21]
                include:
                    - {compiler: clang-21, cc: "clang-21", cxx: "clang++-21", flags: "--test_env=TSAN_SYMBOLIZER_PATH=/usr/bin/llvm-symbolizer-21 --config=clang"}
                    - {compiler: gcc-15, cc: "gcc", cxx: "g++", flags: ""}
        env:
            USE_BAZEL_VERSION: "8.4.2"
            BAZELFLAGS: "--config=ci --config=tsan --action_env=CC=${{matrix.cc}} --action_env=CXX=${{matrix.cxx}} ${{matrix.flags}}"
        steps:
            - uses: actions/checkout@v5
            - uses: actions/cache@v4
              with:
                key: bazel-cache-linux-${{matrix.compiler}}-ubsan-${{hashFiles('MODULE.bazel', 'BUILD.bazel')}}
                restore-keys: bazel-cache-linux-${{matrix.compiler}}-ubsan-
                path: |
                    ~/.cache/bazel
                    ~/.cache/bazelisk

            - run: bazel build ${{env.BAZELFLAGS}} //...
            - run: bazel test ${{env.BAZELFLAGS}} //...
