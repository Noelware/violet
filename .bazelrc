# ðŸŒºðŸ’œ Violet: Extended standard library for C++26
# Copyright (c) 2025 Noelware, LLC. <team@noelware.org> & other contributors
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# For `--config=dbg`, we set `--compilation_mode` to `dbg`
build:dbg --compilation_mode=dbg

# For `--config=opt`, we set `--compilation_mode` to `opt`
build:opt --compilation_mode=opt

# For `.bazelrc`, we can specify platform-specific Bazel flags with this.
common --enable_platform_specific_config

# Requires for Windows usage
startup --windows_enable_symlinks
build:windows --enable_runfiles

# Enable C++26 support
build:linux --cxxopt='-std=c++26' --host_cxxopt='-std=c++26' --client_env=BAZEL_CXXOPTS=-std=c++26
build:macos --cxxopt='-std=c++26' --host_cxxopt='-std=c++26' --client_env=BAZEL_CXXOPTS=-std=c++26
build:windows --cxxopt='/std:c++latest' --host_cxxopt='/std:c++latest' --client_env=BAZEL_CXXOPTS=/std:c++latest

# Include build information
build --stamp
build --workspace_status_command=./hack/stamp.sh

# Only show errors in test output
test --test_output=errors

# For `--config=clang` (if on Clang), use libc++ instead of libstdc++
build:clang --cxxopt=-nostdinc++ --host_cxxopt=-nostdinc++ --client_env=BAZEL_CXXOPTS=-nostdinc++
build:clang --cxxopt=-stdlib=libc++ --host_cxxopt=-stdlib=libc++ --client_env=BAZEL_CXXOPTS=-stdlib=libc++
build:clang --linkopt=-stdlib=libc++ --host_linkopt=-stdlib=libc++ --client_env=BAZEL_LINKOPTS=-stdlib=libc++
build:clang --linkopt=-lc++abi --host_linkopt=-lc++abi --client_env=BAZEL_LINKOPTS=-lc++abi
build:clang --linkopt=-lc++ --host_linkopt=-lc++ --client_env=BAZEL_LINKOPTS=-lc++

# For `--config=gcc` (if on GCC), use libstdc++ instead if libc++
build:gcc --cxxopt=-stdlib=libstdc++ --host_cxxopt=-stdlib=libstdc++ --client_env=BAZEL_CXXOPTS=-stdlib=libstdc++

# CI-based configuration
build:ci --nokeep_state_after_build
test:ci --test_output=all
common:ci --noshow_progress
common:ci --verbose_failures

## ~ common configuration for sanitizers
common:san --config=dbg --strip=never --copt=-O0 --copt=-fno-omit-frame-pointer

## ~ `--config=asan` enables Address Sanitizer (ASan)
common:asan --config=san --//buildsystem/bazel/configs:asan=True

## ~ `--config=msan` enables Memory Sanitizer (MSan)
common:msan --config=san --//buildsystem/bazel/configs:msan=True

## ~ `--config=ubsan` enables Undefined Behaviour Sanitizer (UBSan)
common:ubsan --config=san --linkopt=-lubsan --//buildsystem/bazel/configs:ubsan=True

## ~ `--config=tsan` enables Thread Sanitizer (TSan)
common:tsan --config=san --//buildsystem/bazel/configs:tsan=True

# Import .usr.bazelrc if it exists
try-import %workspace%/.usr.bazelrc
